name: trunk

on:
  push:
    branches: [ "feature-*" ]
  pull_request:
    types:
      - closed

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: |
          echo 'HEAD HEAD^'
          git --no-pager diff --name-only HEAD HEAD^
          echo 'HEAD origin/main'
          git --no-pager diff --name-only HEAD origin/main
          echo 'ref_name...origin/main'
          git --no-pager diff --name-only ${{ github.ref_name }}...origin/main
          echo 'ref_name origin/main'
          git --no-pager diff --name-only ${{ github.ref_name }} origin/main
          echo 'ref_name head_ref'
          git --no-pager diff --name-only ${{ github.ref_name }} ${{ github.head_ref }}

      - uses: actions/github-script@v6
        id: infer
        with:
          script: |
            const childProcess = require("child_process");
            
            const branchName = '${{ github.ref_name }}';
            if (!branchName.startsWith('feature') && branchName !== 'main') {
              console.log("❗ The branch doesn't satisfy our naming requirements ❗");
              process.exit(1);
            }
            const branchType = branchName.split('-')[0];
            
            const newestCommonAncestor = await new Promise((resolve, reject) => {
              childProcess.exec(`git merge-base origin/main ${ branchName }`, (err, stdout, stderr) => {
                if (err) {
                  console.error('Git command failed with output: ' + stderr);
                  reject(err);
                }
                const newestCommonAncestor = stdout.trim();
                resolve(newestCommonAncestor);
              });
            });
            
            const modifiedDirectories = await new Promise((resolve, reject) => {
              childProcess.exec(`git --no-pager diff --name-only ${ newestCommonAncestor } HEAD`, (err, stdout, stderr) => {
                if (err) {
                  console.error('Git command failed with output: ' + stderr);
                  reject(err);
                }
                const modifiedFiles = stdout.trim().split('\n');
                const modifiedDirectories = new Set(
                  modifiedFiles.map(path => path.split('/')[0])
                );
                resolve(modifiedDirectories);
              });
            });

            core.setOutput('branchType', branchType);
            core.setOutput('modifiedDirectories', modifiedDirectories);

            console.log(modifiedDirectories);
            console.table({ branchType, modifiedDirectories });
          
